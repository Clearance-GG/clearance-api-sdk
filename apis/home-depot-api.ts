/* tslint:disable */
/* eslint-disable */
/**
 * Clearance API
 * Clearance.gg API docs for all the bots and monitors
 *
 * OpenAPI spec version: 1.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

import globalAxios, { AxiosResponse, AxiosInstance, AxiosRequestConfig } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
import { BulkUpsertHDStoreItemsDto } from '../models';
import { HDCategoryDto } from '../models';
import { HDGlobalItemsResponseDto } from '../models';
import { HDItemMSRPDto } from '../models';
import { HDStoreDto } from '../models';
import { HDStoreItemsResponseDto } from '../models';
/**
 * HomeDepotApi - axios parameter creator
 * @export
 */
export const HomeDepotApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Add HD Stores to DB
         * @param {Array<string>} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        hDControllerAddHDStore: async (body: Array<string>, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new RequiredError('body','Required parameter body was null or undefined when calling hDControllerAddHDStore.');
            }
            const localVarPath = `/api/retailers/homedepot/stores/add`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarHeaderParameter['Content-Type'] = 'application/json';

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof body !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(body !== undefined ? body : {}) : (body || "");

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Adds item data for a specific store ID
         * @param {BulkUpsertHDStoreItemsDto} body 
         * @param {string} storeId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        hDControllerAddItemsToStore: async (body: BulkUpsertHDStoreItemsDto, storeId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new RequiredError('body','Required parameter body was null or undefined when calling hDControllerAddItemsToStore.');
            }
            // verify required parameter 'storeId' is not null or undefined
            if (storeId === null || storeId === undefined) {
                throw new RequiredError('storeId','Required parameter storeId was null or undefined when calling hDControllerAddItemsToStore.');
            }
            const localVarPath = `/api/retailers/homedepot/items/stores/{storeId}`
                .replace(`{${"storeId"}}`, encodeURIComponent(String(storeId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarHeaderParameter['Content-Type'] = 'application/json';

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof body !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(body !== undefined ? body : {}) : (body || "");

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get all HD categories info
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        hDControllerGetAllHDCategories: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/retailers/homedepot/categories`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get all HD stores info
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        hDControllerGetAllHDStores: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/retailers/homedepot/stores`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get HD item MSRP price
         * @param {Array<string>} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        hDControllerGetHDItemsPrice: async (body: Array<string>, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new RequiredError('body','Required parameter body was null or undefined when calling hDControllerGetHDItemsPrice.');
            }
            const localVarPath = `/api/retailers/homedepot/items`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarHeaderParameter['Content-Type'] = 'application/json';

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof body !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(body !== undefined ? body : {}) : (body || "");

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get HD store info
         * @param {Array<string>} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        hDControllerGetHDStores: async (body: Array<string>, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new RequiredError('body','Required parameter body was null or undefined when calling hDControllerGetHDStores.');
            }
            const localVarPath = `/api/retailers/homedepot/stores`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarHeaderParameter['Content-Type'] = 'application/json';

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof body !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(body !== undefined ? body : {}) : (body || "");

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Returns items with optional pagination within a specified store
         * @param {string} storeId 
         * @param {number} [page] Page number for pagination
         * @param {number} [pageSize] Number of items per page
         * @param {string} [searchKey] Search key for filtering items by itemId, storeSku, modelNumber, upc, brand, or name
         * @param {string} [categoryId] Filter by category ID
         * @param {string} [msrp] Filter items with msrp greater than, less than, or equal
         * @param {string} [buyAsLowAs] Filter items with buyAsLowAs greater than, less than, or equal
         * @param {string} [clearanceOnly] Filter only clearance items? Accepts &#x27;Y&#x27; or &#x27;N&#x27;
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        hDControllerGetItemsByStore: async (storeId: string, page?: number, pageSize?: number, searchKey?: string, categoryId?: string, msrp?: string, buyAsLowAs?: string, clearanceOnly?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'storeId' is not null or undefined
            if (storeId === null || storeId === undefined) {
                throw new RequiredError('storeId','Required parameter storeId was null or undefined when calling hDControllerGetItemsByStore.');
            }
            const localVarPath = `/api/retailers/homedepot/items/store/{storeId}`
                .replace(`{${"storeId"}}`, encodeURIComponent(String(storeId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (pageSize !== undefined) {
                localVarQueryParameter['pageSize'] = pageSize;
            }

            if (searchKey !== undefined) {
                localVarQueryParameter['searchKey'] = searchKey;
            }

            if (categoryId !== undefined) {
                localVarQueryParameter['categoryId'] = categoryId;
            }

            if (msrp !== undefined) {
                localVarQueryParameter['msrp'] = msrp;
            }

            if (buyAsLowAs !== undefined) {
                localVarQueryParameter['buyAsLowAs'] = buyAsLowAs;
            }

            if (clearanceOnly !== undefined) {
                localVarQueryParameter['clearanceOnly'] = clearanceOnly;
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Returns items with optional pagination
         * @param {number} [page] Page number for pagination
         * @param {number} [pageSize] Number of items per page
         * @param {string} [searchKey] Search key for filtering items by itemId, storeSku, modelNumber, upc, brand, or name
         * @param {string} [categoryId] Filter by category ID
         * @param {string} [msrp] Filter items with msrp greater than, less than, or equal
         * @param {string} [buyAsLowAs] Filter items with buyAsLowAs greater than, less than, or equal
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        hDControllerGetItemsGlobally: async (page?: number, pageSize?: number, searchKey?: string, categoryId?: string, msrp?: string, buyAsLowAs?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/retailers/homedepot/items`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (pageSize !== undefined) {
                localVarQueryParameter['pageSize'] = pageSize;
            }

            if (searchKey !== undefined) {
                localVarQueryParameter['searchKey'] = searchKey;
            }

            if (categoryId !== undefined) {
                localVarQueryParameter['categoryId'] = categoryId;
            }

            if (msrp !== undefined) {
                localVarQueryParameter['msrp'] = msrp;
            }

            if (buyAsLowAs !== undefined) {
                localVarQueryParameter['buyAsLowAs'] = buyAsLowAs;
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * HomeDepotApi - functional programming interface
 * @export
 */
export const HomeDepotApiFp = function(configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Add HD Stores to DB
         * @param {Array<string>} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async hDControllerAddHDStore(body: Array<string>, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<void>>> {
            const localVarAxiosArgs = await HomeDepotApiAxiosParamCreator(configuration).hDControllerAddHDStore(body, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary Adds item data for a specific store ID
         * @param {BulkUpsertHDStoreItemsDto} body 
         * @param {string} storeId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async hDControllerAddItemsToStore(body: BulkUpsertHDStoreItemsDto, storeId: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<void>>> {
            const localVarAxiosArgs = await HomeDepotApiAxiosParamCreator(configuration).hDControllerAddItemsToStore(body, storeId, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary Get all HD categories info
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async hDControllerGetAllHDCategories(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<Array<HDCategoryDto>>>> {
            const localVarAxiosArgs = await HomeDepotApiAxiosParamCreator(configuration).hDControllerGetAllHDCategories(options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary Get all HD stores info
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async hDControllerGetAllHDStores(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<Array<HDStoreDto>>>> {
            const localVarAxiosArgs = await HomeDepotApiAxiosParamCreator(configuration).hDControllerGetAllHDStores(options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary Get HD item MSRP price
         * @param {Array<string>} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async hDControllerGetHDItemsPrice(body: Array<string>, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<Array<HDItemMSRPDto>>>> {
            const localVarAxiosArgs = await HomeDepotApiAxiosParamCreator(configuration).hDControllerGetHDItemsPrice(body, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary Get HD store info
         * @param {Array<string>} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async hDControllerGetHDStores(body: Array<string>, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<Array<HDStoreDto>>>> {
            const localVarAxiosArgs = await HomeDepotApiAxiosParamCreator(configuration).hDControllerGetHDStores(body, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary Returns items with optional pagination within a specified store
         * @param {string} storeId 
         * @param {number} [page] Page number for pagination
         * @param {number} [pageSize] Number of items per page
         * @param {string} [searchKey] Search key for filtering items by itemId, storeSku, modelNumber, upc, brand, or name
         * @param {string} [categoryId] Filter by category ID
         * @param {string} [msrp] Filter items with msrp greater than, less than, or equal
         * @param {string} [buyAsLowAs] Filter items with buyAsLowAs greater than, less than, or equal
         * @param {string} [clearanceOnly] Filter only clearance items? Accepts &#x27;Y&#x27; or &#x27;N&#x27;
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async hDControllerGetItemsByStore(storeId: string, page?: number, pageSize?: number, searchKey?: string, categoryId?: string, msrp?: string, buyAsLowAs?: string, clearanceOnly?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<HDStoreItemsResponseDto>>> {
            const localVarAxiosArgs = await HomeDepotApiAxiosParamCreator(configuration).hDControllerGetItemsByStore(storeId, page, pageSize, searchKey, categoryId, msrp, buyAsLowAs, clearanceOnly, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary Returns items with optional pagination
         * @param {number} [page] Page number for pagination
         * @param {number} [pageSize] Number of items per page
         * @param {string} [searchKey] Search key for filtering items by itemId, storeSku, modelNumber, upc, brand, or name
         * @param {string} [categoryId] Filter by category ID
         * @param {string} [msrp] Filter items with msrp greater than, less than, or equal
         * @param {string} [buyAsLowAs] Filter items with buyAsLowAs greater than, less than, or equal
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async hDControllerGetItemsGlobally(page?: number, pageSize?: number, searchKey?: string, categoryId?: string, msrp?: string, buyAsLowAs?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<HDGlobalItemsResponseDto>>> {
            const localVarAxiosArgs = await HomeDepotApiAxiosParamCreator(configuration).hDControllerGetItemsGlobally(page, pageSize, searchKey, categoryId, msrp, buyAsLowAs, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
    }
};

/**
 * HomeDepotApi - factory interface
 * @export
 */
export const HomeDepotApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    return {
        /**
         * 
         * @summary Add HD Stores to DB
         * @param {Array<string>} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async hDControllerAddHDStore(body: Array<string>, options?: AxiosRequestConfig): Promise<AxiosResponse<void>> {
            return HomeDepotApiFp(configuration).hDControllerAddHDStore(body, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Adds item data for a specific store ID
         * @param {BulkUpsertHDStoreItemsDto} body 
         * @param {string} storeId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async hDControllerAddItemsToStore(body: BulkUpsertHDStoreItemsDto, storeId: string, options?: AxiosRequestConfig): Promise<AxiosResponse<void>> {
            return HomeDepotApiFp(configuration).hDControllerAddItemsToStore(body, storeId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get all HD categories info
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async hDControllerGetAllHDCategories(options?: AxiosRequestConfig): Promise<AxiosResponse<Array<HDCategoryDto>>> {
            return HomeDepotApiFp(configuration).hDControllerGetAllHDCategories(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get all HD stores info
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async hDControllerGetAllHDStores(options?: AxiosRequestConfig): Promise<AxiosResponse<Array<HDStoreDto>>> {
            return HomeDepotApiFp(configuration).hDControllerGetAllHDStores(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get HD item MSRP price
         * @param {Array<string>} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async hDControllerGetHDItemsPrice(body: Array<string>, options?: AxiosRequestConfig): Promise<AxiosResponse<Array<HDItemMSRPDto>>> {
            return HomeDepotApiFp(configuration).hDControllerGetHDItemsPrice(body, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get HD store info
         * @param {Array<string>} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async hDControllerGetHDStores(body: Array<string>, options?: AxiosRequestConfig): Promise<AxiosResponse<Array<HDStoreDto>>> {
            return HomeDepotApiFp(configuration).hDControllerGetHDStores(body, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Returns items with optional pagination within a specified store
         * @param {string} storeId 
         * @param {number} [page] Page number for pagination
         * @param {number} [pageSize] Number of items per page
         * @param {string} [searchKey] Search key for filtering items by itemId, storeSku, modelNumber, upc, brand, or name
         * @param {string} [categoryId] Filter by category ID
         * @param {string} [msrp] Filter items with msrp greater than, less than, or equal
         * @param {string} [buyAsLowAs] Filter items with buyAsLowAs greater than, less than, or equal
         * @param {string} [clearanceOnly] Filter only clearance items? Accepts &#x27;Y&#x27; or &#x27;N&#x27;
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async hDControllerGetItemsByStore(storeId: string, page?: number, pageSize?: number, searchKey?: string, categoryId?: string, msrp?: string, buyAsLowAs?: string, clearanceOnly?: string, options?: AxiosRequestConfig): Promise<AxiosResponse<HDStoreItemsResponseDto>> {
            return HomeDepotApiFp(configuration).hDControllerGetItemsByStore(storeId, page, pageSize, searchKey, categoryId, msrp, buyAsLowAs, clearanceOnly, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Returns items with optional pagination
         * @param {number} [page] Page number for pagination
         * @param {number} [pageSize] Number of items per page
         * @param {string} [searchKey] Search key for filtering items by itemId, storeSku, modelNumber, upc, brand, or name
         * @param {string} [categoryId] Filter by category ID
         * @param {string} [msrp] Filter items with msrp greater than, less than, or equal
         * @param {string} [buyAsLowAs] Filter items with buyAsLowAs greater than, less than, or equal
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async hDControllerGetItemsGlobally(page?: number, pageSize?: number, searchKey?: string, categoryId?: string, msrp?: string, buyAsLowAs?: string, options?: AxiosRequestConfig): Promise<AxiosResponse<HDGlobalItemsResponseDto>> {
            return HomeDepotApiFp(configuration).hDControllerGetItemsGlobally(page, pageSize, searchKey, categoryId, msrp, buyAsLowAs, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * HomeDepotApi - object-oriented interface
 * @export
 * @class HomeDepotApi
 * @extends {BaseAPI}
 */
export class HomeDepotApi extends BaseAPI {
    /**
     * 
     * @summary Add HD Stores to DB
     * @param {Array<string>} body 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof HomeDepotApi
     */
    public async hDControllerAddHDStore(body: Array<string>, options?: AxiosRequestConfig) : Promise<AxiosResponse<void>> {
        return HomeDepotApiFp(this.configuration).hDControllerAddHDStore(body, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * 
     * @summary Adds item data for a specific store ID
     * @param {BulkUpsertHDStoreItemsDto} body 
     * @param {string} storeId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof HomeDepotApi
     */
    public async hDControllerAddItemsToStore(body: BulkUpsertHDStoreItemsDto, storeId: string, options?: AxiosRequestConfig) : Promise<AxiosResponse<void>> {
        return HomeDepotApiFp(this.configuration).hDControllerAddItemsToStore(body, storeId, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * 
     * @summary Get all HD categories info
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof HomeDepotApi
     */
    public async hDControllerGetAllHDCategories(options?: AxiosRequestConfig) : Promise<AxiosResponse<Array<HDCategoryDto>>> {
        return HomeDepotApiFp(this.configuration).hDControllerGetAllHDCategories(options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * 
     * @summary Get all HD stores info
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof HomeDepotApi
     */
    public async hDControllerGetAllHDStores(options?: AxiosRequestConfig) : Promise<AxiosResponse<Array<HDStoreDto>>> {
        return HomeDepotApiFp(this.configuration).hDControllerGetAllHDStores(options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * 
     * @summary Get HD item MSRP price
     * @param {Array<string>} body 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof HomeDepotApi
     */
    public async hDControllerGetHDItemsPrice(body: Array<string>, options?: AxiosRequestConfig) : Promise<AxiosResponse<Array<HDItemMSRPDto>>> {
        return HomeDepotApiFp(this.configuration).hDControllerGetHDItemsPrice(body, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * 
     * @summary Get HD store info
     * @param {Array<string>} body 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof HomeDepotApi
     */
    public async hDControllerGetHDStores(body: Array<string>, options?: AxiosRequestConfig) : Promise<AxiosResponse<Array<HDStoreDto>>> {
        return HomeDepotApiFp(this.configuration).hDControllerGetHDStores(body, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * 
     * @summary Returns items with optional pagination within a specified store
     * @param {string} storeId 
     * @param {number} [page] Page number for pagination
     * @param {number} [pageSize] Number of items per page
     * @param {string} [searchKey] Search key for filtering items by itemId, storeSku, modelNumber, upc, brand, or name
     * @param {string} [categoryId] Filter by category ID
     * @param {string} [msrp] Filter items with msrp greater than, less than, or equal
     * @param {string} [buyAsLowAs] Filter items with buyAsLowAs greater than, less than, or equal
     * @param {string} [clearanceOnly] Filter only clearance items? Accepts &#x27;Y&#x27; or &#x27;N&#x27;
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof HomeDepotApi
     */
    public async hDControllerGetItemsByStore(storeId: string, page?: number, pageSize?: number, searchKey?: string, categoryId?: string, msrp?: string, buyAsLowAs?: string, clearanceOnly?: string, options?: AxiosRequestConfig) : Promise<AxiosResponse<HDStoreItemsResponseDto>> {
        return HomeDepotApiFp(this.configuration).hDControllerGetItemsByStore(storeId, page, pageSize, searchKey, categoryId, msrp, buyAsLowAs, clearanceOnly, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * 
     * @summary Returns items with optional pagination
     * @param {number} [page] Page number for pagination
     * @param {number} [pageSize] Number of items per page
     * @param {string} [searchKey] Search key for filtering items by itemId, storeSku, modelNumber, upc, brand, or name
     * @param {string} [categoryId] Filter by category ID
     * @param {string} [msrp] Filter items with msrp greater than, less than, or equal
     * @param {string} [buyAsLowAs] Filter items with buyAsLowAs greater than, less than, or equal
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof HomeDepotApi
     */
    public async hDControllerGetItemsGlobally(page?: number, pageSize?: number, searchKey?: string, categoryId?: string, msrp?: string, buyAsLowAs?: string, options?: AxiosRequestConfig) : Promise<AxiosResponse<HDGlobalItemsResponseDto>> {
        return HomeDepotApiFp(this.configuration).hDControllerGetItemsGlobally(page, pageSize, searchKey, categoryId, msrp, buyAsLowAs, options).then((request) => request(this.axios, this.basePath));
    }
}
