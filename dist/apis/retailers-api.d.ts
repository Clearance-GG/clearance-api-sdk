/**
 * Clearance API
 * Clearance.gg API docs for all the bots and monitors
 *
 * OpenAPI spec version: 1.0
 *
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */
import { AxiosResponse, AxiosInstance, AxiosRequestConfig } from 'axios';
import { Configuration } from '../configuration';
import { RequestArgs, BaseAPI } from '../base';
import { BulkUpsertHDStoreItemsDto } from '../models';
import { HDCategoryDto } from '../models';
import { HDClearanceCollectionResponseDto } from '../models';
import { HDGlobalItemsResponseDto } from '../models';
import { HDItemMSRPDto } from '../models';
import { HDPremiumUsageResponseDto } from '../models';
import { HDStoreDto } from '../models';
import { HDStoreItemsResponseDto } from '../models';
import { HDUpdateItemStatusDto } from '../models';
import { UpsertHDStoreItemDto } from '../models';
/**
 * RetailersApi - axios parameter creator
 * @export
 */
export declare const RetailersApiAxiosParamCreator: (configuration?: Configuration) => {
    /**
     *
     * @summary Add premium check usage for a guild
     * @param {string} guildId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    hDControllerAddGuildPremiumChecks: (guildId: string, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     *
     * @summary Add HD Stores to DB
     * @param {Array<string>} body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    hDControllerAddHDStore: (body: Array<string>, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     *
     * @summary Add premium check usage for a specific user and item
     * @param {string} guildId
     * @param {string} userId
     * @param {string} storeId
     * @param {string} itemId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    hDControllerAddItemPremiumCheckUsage: (guildId: string, userId: string, storeId: string, itemId: string, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     *
     * @summary Adds specific item data for a specific store ID
     * @param {UpsertHDStoreItemDto} body
     * @param {string} storeId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    hDControllerAddItemToStore: (body: UpsertHDStoreItemDto, storeId: string, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     *
     * @summary Processes all items in cache to the DB
     * @param {string} categoryId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    hDControllerAddItemsToDb: (categoryId: string, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     *
     * @summary Adds item data for a specific store ID
     * @param {BulkUpsertHDStoreItemsDto} body
     * @param {string} storeId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    hDControllerAddItemsToStore: (body: BulkUpsertHDStoreItemsDto, storeId: string, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     *
     * @summary Add premium check usage for a user
     * @param {string} guildId
     * @param {string} userId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    hDControllerAddUserPremiumChecks: (guildId: string, userId: string, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     *
     * @summary Check stores clearance colletion
     * @param {Array<string>} body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    hDControllerCheckStoreDealLists: (body: Array<string>, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     *
     * @summary Get all HD categories info
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    hDControllerGetAllHDCategories: (options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     *
     * @summary Get all HD stores info
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    hDControllerGetAllHDStores: (options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     *
     * @summary Get all HD stores from zipcodes
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    hDControllerGetAndAddAllStores: (options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     *
     * @summary Get premium checks for a guild
     * @param {string} guildId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    hDControllerGetGuildPremiumChecks: (guildId: string, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     *
     * @summary Get HD item MSRP price
     * @param {Array<string>} body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    hDControllerGetHDItemsPrice: (body: Array<string>, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     *
     * @summary Get HD store info
     * @param {Array<string>} body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    hDControllerGetHDStores: (body: Array<string>, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     *
     * @summary Get new category to monitor
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    hDControllerGetHdCategory: (options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     *
     * @summary Get premium check usage for a specific user and item
     * @param {string} guildId
     * @param {string} userId
     * @param {string} storeId
     * @param {string} itemId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    hDControllerGetItemPremiumCheckUsage: (guildId: string, userId: string, storeId: string, itemId: string, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     *
     * @summary Returns items with optional pagination within a specified store
     * @param {string} storeId
     * @param {number} [page] Page number for pagination
     * @param {number} [pageSize] Number of items per page
     * @param {string} [searchKey] Search key for filtering items by itemId, storeSku, modelNumber, upc, brand, or name
     * @param {string} [categoryId] Filter by category ID
     * @param {string} [msrp] Filter items with msrp greater than, less than, or equal
     * @param {string} [buyAsLowAs] Filter items with buyAsLowAs greater than, less than, or equal
     * @param {boolean} [clearanceOnly] Filter only clearance items?
     * @param {boolean} [instockOnly] Filter only instock items?
     * @param {number} [minimumStock] Filter stores with minimum stock per store
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    hDControllerGetItemsByStore: (storeId: string, page?: number, pageSize?: number, searchKey?: string, categoryId?: string, msrp?: string, buyAsLowAs?: string, clearanceOnly?: boolean, instockOnly?: boolean, minimumStock?: number, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     *
     * @summary Returns items with optional pagination
     * @param {number} [page] Page number for pagination
     * @param {number} [pageSize] Number of items per page
     * @param {string} [searchKey] Search key for filtering items by itemId, storeSku, modelNumber, upc, brand, or name
     * @param {string} [categoryId] Filter by category ID
     * @param {string} [msrp] Filter items with msrp greater than, less than, or equal
     * @param {string} [buyAsLowAs] Filter items with buyAsLowAs greater than, less than, or equal
     * @param {boolean} [clearanceOnly] Filter only clearance items?
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    hDControllerGetItemsGlobally: (page?: number, pageSize?: number, searchKey?: string, categoryId?: string, msrp?: string, buyAsLowAs?: string, clearanceOnly?: boolean, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     *
     * @summary Get premium checks for a user
     * @param {string} guildId
     * @param {string} userId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    hDControllerGetUserPremiumChecks: (guildId: string, userId: string, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     *
     * @summary Add as low as price or mark an item as clearance
     * @param {HDUpdateItemStatusDto} body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    hDControllerUpdateItemStatus: (body: HDUpdateItemStatusDto, options?: AxiosRequestConfig) => Promise<RequestArgs>;
};
/**
 * RetailersApi - functional programming interface
 * @export
 */
export declare const RetailersApiFp: (configuration?: Configuration) => {
    /**
     *
     * @summary Add premium check usage for a guild
     * @param {string} guildId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    hDControllerAddGuildPremiumChecks(guildId: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<void>>>;
    /**
     *
     * @summary Add HD Stores to DB
     * @param {Array<string>} body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    hDControllerAddHDStore(body: Array<string>, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<void>>>;
    /**
     *
     * @summary Add premium check usage for a specific user and item
     * @param {string} guildId
     * @param {string} userId
     * @param {string} storeId
     * @param {string} itemId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    hDControllerAddItemPremiumCheckUsage(guildId: string, userId: string, storeId: string, itemId: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<void>>>;
    /**
     *
     * @summary Adds specific item data for a specific store ID
     * @param {UpsertHDStoreItemDto} body
     * @param {string} storeId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    hDControllerAddItemToStore(body: UpsertHDStoreItemDto, storeId: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<void>>>;
    /**
     *
     * @summary Processes all items in cache to the DB
     * @param {string} categoryId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    hDControllerAddItemsToDb(categoryId: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<void>>>;
    /**
     *
     * @summary Adds item data for a specific store ID
     * @param {BulkUpsertHDStoreItemsDto} body
     * @param {string} storeId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    hDControllerAddItemsToStore(body: BulkUpsertHDStoreItemsDto, storeId: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<void>>>;
    /**
     *
     * @summary Add premium check usage for a user
     * @param {string} guildId
     * @param {string} userId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    hDControllerAddUserPremiumChecks(guildId: string, userId: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<void>>>;
    /**
     *
     * @summary Check stores clearance colletion
     * @param {Array<string>} body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    hDControllerCheckStoreDealLists(body: Array<string>, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<HDClearanceCollectionResponseDto>>>;
    /**
     *
     * @summary Get all HD categories info
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    hDControllerGetAllHDCategories(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<Array<HDCategoryDto>>>>;
    /**
     *
     * @summary Get all HD stores info
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    hDControllerGetAllHDStores(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<Array<HDStoreDto>>>>;
    /**
     *
     * @summary Get all HD stores from zipcodes
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    hDControllerGetAndAddAllStores(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<boolean>>>;
    /**
     *
     * @summary Get premium checks for a guild
     * @param {string} guildId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    hDControllerGetGuildPremiumChecks(guildId: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<HDPremiumUsageResponseDto>>>;
    /**
     *
     * @summary Get HD item MSRP price
     * @param {Array<string>} body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    hDControllerGetHDItemsPrice(body: Array<string>, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<Array<HDItemMSRPDto>>>>;
    /**
     *
     * @summary Get HD store info
     * @param {Array<string>} body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    hDControllerGetHDStores(body: Array<string>, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<Array<HDStoreDto>>>>;
    /**
     *
     * @summary Get new category to monitor
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    hDControllerGetHdCategory(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<HDCategoryDto>>>;
    /**
     *
     * @summary Get premium check usage for a specific user and item
     * @param {string} guildId
     * @param {string} userId
     * @param {string} storeId
     * @param {string} itemId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    hDControllerGetItemPremiumCheckUsage(guildId: string, userId: string, storeId: string, itemId: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<void>>>;
    /**
     *
     * @summary Returns items with optional pagination within a specified store
     * @param {string} storeId
     * @param {number} [page] Page number for pagination
     * @param {number} [pageSize] Number of items per page
     * @param {string} [searchKey] Search key for filtering items by itemId, storeSku, modelNumber, upc, brand, or name
     * @param {string} [categoryId] Filter by category ID
     * @param {string} [msrp] Filter items with msrp greater than, less than, or equal
     * @param {string} [buyAsLowAs] Filter items with buyAsLowAs greater than, less than, or equal
     * @param {boolean} [clearanceOnly] Filter only clearance items?
     * @param {boolean} [instockOnly] Filter only instock items?
     * @param {number} [minimumStock] Filter stores with minimum stock per store
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    hDControllerGetItemsByStore(storeId: string, page?: number, pageSize?: number, searchKey?: string, categoryId?: string, msrp?: string, buyAsLowAs?: string, clearanceOnly?: boolean, instockOnly?: boolean, minimumStock?: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<HDStoreItemsResponseDto>>>;
    /**
     *
     * @summary Returns items with optional pagination
     * @param {number} [page] Page number for pagination
     * @param {number} [pageSize] Number of items per page
     * @param {string} [searchKey] Search key for filtering items by itemId, storeSku, modelNumber, upc, brand, or name
     * @param {string} [categoryId] Filter by category ID
     * @param {string} [msrp] Filter items with msrp greater than, less than, or equal
     * @param {string} [buyAsLowAs] Filter items with buyAsLowAs greater than, less than, or equal
     * @param {boolean} [clearanceOnly] Filter only clearance items?
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    hDControllerGetItemsGlobally(page?: number, pageSize?: number, searchKey?: string, categoryId?: string, msrp?: string, buyAsLowAs?: string, clearanceOnly?: boolean, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<HDGlobalItemsResponseDto>>>;
    /**
     *
     * @summary Get premium checks for a user
     * @param {string} guildId
     * @param {string} userId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    hDControllerGetUserPremiumChecks(guildId: string, userId: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<HDPremiumUsageResponseDto>>>;
    /**
     *
     * @summary Add as low as price or mark an item as clearance
     * @param {HDUpdateItemStatusDto} body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    hDControllerUpdateItemStatus(body: HDUpdateItemStatusDto, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<void>>>;
};
/**
 * RetailersApi - factory interface
 * @export
 */
export declare const RetailersApiFactory: (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) => {
    /**
     *
     * @summary Add premium check usage for a guild
     * @param {string} guildId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    hDControllerAddGuildPremiumChecks(guildId: string, options?: AxiosRequestConfig): Promise<AxiosResponse<void>>;
    /**
     *
     * @summary Add HD Stores to DB
     * @param {Array<string>} body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    hDControllerAddHDStore(body: Array<string>, options?: AxiosRequestConfig): Promise<AxiosResponse<void>>;
    /**
     *
     * @summary Add premium check usage for a specific user and item
     * @param {string} guildId
     * @param {string} userId
     * @param {string} storeId
     * @param {string} itemId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    hDControllerAddItemPremiumCheckUsage(guildId: string, userId: string, storeId: string, itemId: string, options?: AxiosRequestConfig): Promise<AxiosResponse<void>>;
    /**
     *
     * @summary Adds specific item data for a specific store ID
     * @param {UpsertHDStoreItemDto} body
     * @param {string} storeId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    hDControllerAddItemToStore(body: UpsertHDStoreItemDto, storeId: string, options?: AxiosRequestConfig): Promise<AxiosResponse<void>>;
    /**
     *
     * @summary Processes all items in cache to the DB
     * @param {string} categoryId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    hDControllerAddItemsToDb(categoryId: string, options?: AxiosRequestConfig): Promise<AxiosResponse<void>>;
    /**
     *
     * @summary Adds item data for a specific store ID
     * @param {BulkUpsertHDStoreItemsDto} body
     * @param {string} storeId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    hDControllerAddItemsToStore(body: BulkUpsertHDStoreItemsDto, storeId: string, options?: AxiosRequestConfig): Promise<AxiosResponse<void>>;
    /**
     *
     * @summary Add premium check usage for a user
     * @param {string} guildId
     * @param {string} userId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    hDControllerAddUserPremiumChecks(guildId: string, userId: string, options?: AxiosRequestConfig): Promise<AxiosResponse<void>>;
    /**
     *
     * @summary Check stores clearance colletion
     * @param {Array<string>} body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    hDControllerCheckStoreDealLists(body: Array<string>, options?: AxiosRequestConfig): Promise<AxiosResponse<HDClearanceCollectionResponseDto>>;
    /**
     *
     * @summary Get all HD categories info
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    hDControllerGetAllHDCategories(options?: AxiosRequestConfig): Promise<AxiosResponse<Array<HDCategoryDto>>>;
    /**
     *
     * @summary Get all HD stores info
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    hDControllerGetAllHDStores(options?: AxiosRequestConfig): Promise<AxiosResponse<Array<HDStoreDto>>>;
    /**
     *
     * @summary Get all HD stores from zipcodes
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    hDControllerGetAndAddAllStores(options?: AxiosRequestConfig): Promise<AxiosResponse<boolean>>;
    /**
     *
     * @summary Get premium checks for a guild
     * @param {string} guildId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    hDControllerGetGuildPremiumChecks(guildId: string, options?: AxiosRequestConfig): Promise<AxiosResponse<HDPremiumUsageResponseDto>>;
    /**
     *
     * @summary Get HD item MSRP price
     * @param {Array<string>} body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    hDControllerGetHDItemsPrice(body: Array<string>, options?: AxiosRequestConfig): Promise<AxiosResponse<Array<HDItemMSRPDto>>>;
    /**
     *
     * @summary Get HD store info
     * @param {Array<string>} body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    hDControllerGetHDStores(body: Array<string>, options?: AxiosRequestConfig): Promise<AxiosResponse<Array<HDStoreDto>>>;
    /**
     *
     * @summary Get new category to monitor
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    hDControllerGetHdCategory(options?: AxiosRequestConfig): Promise<AxiosResponse<HDCategoryDto>>;
    /**
     *
     * @summary Get premium check usage for a specific user and item
     * @param {string} guildId
     * @param {string} userId
     * @param {string} storeId
     * @param {string} itemId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    hDControllerGetItemPremiumCheckUsage(guildId: string, userId: string, storeId: string, itemId: string, options?: AxiosRequestConfig): Promise<AxiosResponse<void>>;
    /**
     *
     * @summary Returns items with optional pagination within a specified store
     * @param {string} storeId
     * @param {number} [page] Page number for pagination
     * @param {number} [pageSize] Number of items per page
     * @param {string} [searchKey] Search key for filtering items by itemId, storeSku, modelNumber, upc, brand, or name
     * @param {string} [categoryId] Filter by category ID
     * @param {string} [msrp] Filter items with msrp greater than, less than, or equal
     * @param {string} [buyAsLowAs] Filter items with buyAsLowAs greater than, less than, or equal
     * @param {boolean} [clearanceOnly] Filter only clearance items?
     * @param {boolean} [instockOnly] Filter only instock items?
     * @param {number} [minimumStock] Filter stores with minimum stock per store
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    hDControllerGetItemsByStore(storeId: string, page?: number, pageSize?: number, searchKey?: string, categoryId?: string, msrp?: string, buyAsLowAs?: string, clearanceOnly?: boolean, instockOnly?: boolean, minimumStock?: number, options?: AxiosRequestConfig): Promise<AxiosResponse<HDStoreItemsResponseDto>>;
    /**
     *
     * @summary Returns items with optional pagination
     * @param {number} [page] Page number for pagination
     * @param {number} [pageSize] Number of items per page
     * @param {string} [searchKey] Search key for filtering items by itemId, storeSku, modelNumber, upc, brand, or name
     * @param {string} [categoryId] Filter by category ID
     * @param {string} [msrp] Filter items with msrp greater than, less than, or equal
     * @param {string} [buyAsLowAs] Filter items with buyAsLowAs greater than, less than, or equal
     * @param {boolean} [clearanceOnly] Filter only clearance items?
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    hDControllerGetItemsGlobally(page?: number, pageSize?: number, searchKey?: string, categoryId?: string, msrp?: string, buyAsLowAs?: string, clearanceOnly?: boolean, options?: AxiosRequestConfig): Promise<AxiosResponse<HDGlobalItemsResponseDto>>;
    /**
     *
     * @summary Get premium checks for a user
     * @param {string} guildId
     * @param {string} userId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    hDControllerGetUserPremiumChecks(guildId: string, userId: string, options?: AxiosRequestConfig): Promise<AxiosResponse<HDPremiumUsageResponseDto>>;
    /**
     *
     * @summary Add as low as price or mark an item as clearance
     * @param {HDUpdateItemStatusDto} body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    hDControllerUpdateItemStatus(body: HDUpdateItemStatusDto, options?: AxiosRequestConfig): Promise<AxiosResponse<void>>;
};
/**
 * RetailersApi - object-oriented interface
 * @export
 * @class RetailersApi
 * @extends {BaseAPI}
 */
export declare class RetailersApi extends BaseAPI {
    /**
     *
     * @summary Add premium check usage for a guild
     * @param {string} guildId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RetailersApi
     */
    hDControllerAddGuildPremiumChecks(guildId: string, options?: AxiosRequestConfig): Promise<AxiosResponse<void>>;
    /**
     *
     * @summary Add HD Stores to DB
     * @param {Array<string>} body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RetailersApi
     */
    hDControllerAddHDStore(body: Array<string>, options?: AxiosRequestConfig): Promise<AxiosResponse<void>>;
    /**
     *
     * @summary Add premium check usage for a specific user and item
     * @param {string} guildId
     * @param {string} userId
     * @param {string} storeId
     * @param {string} itemId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RetailersApi
     */
    hDControllerAddItemPremiumCheckUsage(guildId: string, userId: string, storeId: string, itemId: string, options?: AxiosRequestConfig): Promise<AxiosResponse<void>>;
    /**
     *
     * @summary Adds specific item data for a specific store ID
     * @param {UpsertHDStoreItemDto} body
     * @param {string} storeId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RetailersApi
     */
    hDControllerAddItemToStore(body: UpsertHDStoreItemDto, storeId: string, options?: AxiosRequestConfig): Promise<AxiosResponse<void>>;
    /**
     *
     * @summary Processes all items in cache to the DB
     * @param {string} categoryId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RetailersApi
     */
    hDControllerAddItemsToDb(categoryId: string, options?: AxiosRequestConfig): Promise<AxiosResponse<void>>;
    /**
     *
     * @summary Adds item data for a specific store ID
     * @param {BulkUpsertHDStoreItemsDto} body
     * @param {string} storeId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RetailersApi
     */
    hDControllerAddItemsToStore(body: BulkUpsertHDStoreItemsDto, storeId: string, options?: AxiosRequestConfig): Promise<AxiosResponse<void>>;
    /**
     *
     * @summary Add premium check usage for a user
     * @param {string} guildId
     * @param {string} userId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RetailersApi
     */
    hDControllerAddUserPremiumChecks(guildId: string, userId: string, options?: AxiosRequestConfig): Promise<AxiosResponse<void>>;
    /**
     *
     * @summary Check stores clearance colletion
     * @param {Array<string>} body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RetailersApi
     */
    hDControllerCheckStoreDealLists(body: Array<string>, options?: AxiosRequestConfig): Promise<AxiosResponse<HDClearanceCollectionResponseDto>>;
    /**
     *
     * @summary Get all HD categories info
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RetailersApi
     */
    hDControllerGetAllHDCategories(options?: AxiosRequestConfig): Promise<AxiosResponse<Array<HDCategoryDto>>>;
    /**
     *
     * @summary Get all HD stores info
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RetailersApi
     */
    hDControllerGetAllHDStores(options?: AxiosRequestConfig): Promise<AxiosResponse<Array<HDStoreDto>>>;
    /**
     *
     * @summary Get all HD stores from zipcodes
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RetailersApi
     */
    hDControllerGetAndAddAllStores(options?: AxiosRequestConfig): Promise<AxiosResponse<boolean>>;
    /**
     *
     * @summary Get premium checks for a guild
     * @param {string} guildId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RetailersApi
     */
    hDControllerGetGuildPremiumChecks(guildId: string, options?: AxiosRequestConfig): Promise<AxiosResponse<HDPremiumUsageResponseDto>>;
    /**
     *
     * @summary Get HD item MSRP price
     * @param {Array<string>} body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RetailersApi
     */
    hDControllerGetHDItemsPrice(body: Array<string>, options?: AxiosRequestConfig): Promise<AxiosResponse<Array<HDItemMSRPDto>>>;
    /**
     *
     * @summary Get HD store info
     * @param {Array<string>} body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RetailersApi
     */
    hDControllerGetHDStores(body: Array<string>, options?: AxiosRequestConfig): Promise<AxiosResponse<Array<HDStoreDto>>>;
    /**
     *
     * @summary Get new category to monitor
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RetailersApi
     */
    hDControllerGetHdCategory(options?: AxiosRequestConfig): Promise<AxiosResponse<HDCategoryDto>>;
    /**
     *
     * @summary Get premium check usage for a specific user and item
     * @param {string} guildId
     * @param {string} userId
     * @param {string} storeId
     * @param {string} itemId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RetailersApi
     */
    hDControllerGetItemPremiumCheckUsage(guildId: string, userId: string, storeId: string, itemId: string, options?: AxiosRequestConfig): Promise<AxiosResponse<void>>;
    /**
     *
     * @summary Returns items with optional pagination within a specified store
     * @param {string} storeId
     * @param {number} [page] Page number for pagination
     * @param {number} [pageSize] Number of items per page
     * @param {string} [searchKey] Search key for filtering items by itemId, storeSku, modelNumber, upc, brand, or name
     * @param {string} [categoryId] Filter by category ID
     * @param {string} [msrp] Filter items with msrp greater than, less than, or equal
     * @param {string} [buyAsLowAs] Filter items with buyAsLowAs greater than, less than, or equal
     * @param {boolean} [clearanceOnly] Filter only clearance items?
     * @param {boolean} [instockOnly] Filter only instock items?
     * @param {number} [minimumStock] Filter stores with minimum stock per store
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RetailersApi
     */
    hDControllerGetItemsByStore(storeId: string, page?: number, pageSize?: number, searchKey?: string, categoryId?: string, msrp?: string, buyAsLowAs?: string, clearanceOnly?: boolean, instockOnly?: boolean, minimumStock?: number, options?: AxiosRequestConfig): Promise<AxiosResponse<HDStoreItemsResponseDto>>;
    /**
     *
     * @summary Returns items with optional pagination
     * @param {number} [page] Page number for pagination
     * @param {number} [pageSize] Number of items per page
     * @param {string} [searchKey] Search key for filtering items by itemId, storeSku, modelNumber, upc, brand, or name
     * @param {string} [categoryId] Filter by category ID
     * @param {string} [msrp] Filter items with msrp greater than, less than, or equal
     * @param {string} [buyAsLowAs] Filter items with buyAsLowAs greater than, less than, or equal
     * @param {boolean} [clearanceOnly] Filter only clearance items?
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RetailersApi
     */
    hDControllerGetItemsGlobally(page?: number, pageSize?: number, searchKey?: string, categoryId?: string, msrp?: string, buyAsLowAs?: string, clearanceOnly?: boolean, options?: AxiosRequestConfig): Promise<AxiosResponse<HDGlobalItemsResponseDto>>;
    /**
     *
     * @summary Get premium checks for a user
     * @param {string} guildId
     * @param {string} userId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RetailersApi
     */
    hDControllerGetUserPremiumChecks(guildId: string, userId: string, options?: AxiosRequestConfig): Promise<AxiosResponse<HDPremiumUsageResponseDto>>;
    /**
     *
     * @summary Add as low as price or mark an item as clearance
     * @param {HDUpdateItemStatusDto} body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RetailersApi
     */
    hDControllerUpdateItemStatus(body: HDUpdateItemStatusDto, options?: AxiosRequestConfig): Promise<AxiosResponse<void>>;
}
