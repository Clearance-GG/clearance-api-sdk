/**
 * Clearance API
 * Clearance.gg API docs for all the bots and monitors
 *
 * OpenAPI spec version: 1.0
 *
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */
import { AxiosResponse, AxiosInstance, AxiosRequestConfig } from 'axios';
import { Configuration } from '../configuration';
import { RequestArgs, BaseAPI } from '../base';
import { UpsertUserDto } from '../models';
import { UserDto } from '../models';
/**
 * UsersApi - axios parameter creator
 * @export
 */
export declare const UsersApiAxiosParamCreator: (configuration?: Configuration) => {
    /**
     *
     * @summary Find data for a specific user
     * @param {string} userId The ID of the user to find
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    usersControllerGetUser: (userId: string, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     *
     * @summary Update or create user data
     * @param {UpsertUserDto} body The info to update/create
     * @param {string} userId The ID of the user to update/create
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    usersControllerUpdateUser: (body: UpsertUserDto, userId: string, options?: AxiosRequestConfig) => Promise<RequestArgs>;
};
/**
 * UsersApi - functional programming interface
 * @export
 */
export declare const UsersApiFp: (configuration?: Configuration) => {
    /**
     *
     * @summary Find data for a specific user
     * @param {string} userId The ID of the user to find
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    usersControllerGetUser(userId: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<UserDto>>>;
    /**
     *
     * @summary Update or create user data
     * @param {UpsertUserDto} body The info to update/create
     * @param {string} userId The ID of the user to update/create
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    usersControllerUpdateUser(body: UpsertUserDto, userId: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<void>>>;
};
/**
 * UsersApi - factory interface
 * @export
 */
export declare const UsersApiFactory: (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) => {
    /**
     *
     * @summary Find data for a specific user
     * @param {string} userId The ID of the user to find
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    usersControllerGetUser(userId: string, options?: AxiosRequestConfig): Promise<AxiosResponse<UserDto>>;
    /**
     *
     * @summary Update or create user data
     * @param {UpsertUserDto} body The info to update/create
     * @param {string} userId The ID of the user to update/create
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    usersControllerUpdateUser(body: UpsertUserDto, userId: string, options?: AxiosRequestConfig): Promise<AxiosResponse<void>>;
};
/**
 * UsersApi - object-oriented interface
 * @export
 * @class UsersApi
 * @extends {BaseAPI}
 */
export declare class UsersApi extends BaseAPI {
    /**
     *
     * @summary Find data for a specific user
     * @param {string} userId The ID of the user to find
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersApi
     */
    usersControllerGetUser(userId: string, options?: AxiosRequestConfig): Promise<AxiosResponse<UserDto>>;
    /**
     *
     * @summary Update or create user data
     * @param {UpsertUserDto} body The info to update/create
     * @param {string} userId The ID of the user to update/create
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersApi
     */
    usersControllerUpdateUser(body: UpsertUserDto, userId: string, options?: AxiosRequestConfig): Promise<AxiosResponse<void>>;
}
