/**
 * Clearance API
 * Clearance.gg API docs for all the bots and monitors
 *
 * OpenAPI spec version: 1.0
 *
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */
import { AxiosResponse, AxiosInstance, AxiosRequestConfig } from 'axios';
import { Configuration } from '../configuration';
import { RequestArgs, BaseAPI } from '../base';
import { BulkUpsertHDStoreItemsDto } from '../models';
import { HDCategoryDto } from '../models';
import { HDGlobalItemsResponseDto } from '../models';
import { HDItemMSRPDto } from '../models';
import { HDStoreDto } from '../models';
import { HDStoreItemsResponseDto } from '../models';
/**
 * HomeDepotApi - axios parameter creator
 * @export
 */
export declare const HomeDepotApiAxiosParamCreator: (configuration?: Configuration) => {
    /**
     *
     * @summary Add HD Stores to DB
     * @param {Array<string>} body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    hDControllerAddHDStore: (body: Array<string>, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     *
     * @summary Adds item data for a specific store ID
     * @param {BulkUpsertHDStoreItemsDto} body
     * @param {string} storeId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    hDControllerAddItemsToStore: (body: BulkUpsertHDStoreItemsDto, storeId: string, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     *
     * @summary Get all HD categories info
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    hDControllerGetAllHDCategories: (options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     *
     * @summary Get all HD stores info
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    hDControllerGetAllHDStores: (options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     *
     * @summary Get HD item MSRP price
     * @param {Array<string>} body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    hDControllerGetHDItemsPrice: (body: Array<string>, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     *
     * @summary Get HD store info
     * @param {Array<string>} body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    hDControllerGetHDStores: (body: Array<string>, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     *
     * @summary Returns items with optional pagination within a specified store
     * @param {string} storeId
     * @param {number} [page] Page number for pagination
     * @param {number} [pageSize] Number of items per page
     * @param {string} [searchKey] Search key for filtering items by itemId, storeSku, modelNumber, upc, brand, or name
     * @param {string} [categoryId] Filter by category ID
     * @param {string} [msrp] Filter items with msrp greater than, less than, or equal
     * @param {string} [buyAsLowAs] Filter items with buyAsLowAs greater than, less than, or equal
     * @param {string} [clearanceOnly] Filter only clearance items? Accepts &#x27;Y&#x27; or &#x27;N&#x27;
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    hDControllerGetItemsByStore: (storeId: string, page?: number, pageSize?: number, searchKey?: string, categoryId?: string, msrp?: string, buyAsLowAs?: string, clearanceOnly?: string, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     *
     * @summary Returns items with optional pagination
     * @param {number} [page] Page number for pagination
     * @param {number} [pageSize] Number of items per page
     * @param {string} [searchKey] Search key for filtering items by itemId, storeSku, modelNumber, upc, brand, or name
     * @param {string} [categoryId] Filter by category ID
     * @param {string} [msrp] Filter items with msrp greater than, less than, or equal
     * @param {string} [buyAsLowAs] Filter items with buyAsLowAs greater than, less than, or equal
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    hDControllerGetItemsGlobally: (page?: number, pageSize?: number, searchKey?: string, categoryId?: string, msrp?: string, buyAsLowAs?: string, options?: AxiosRequestConfig) => Promise<RequestArgs>;
};
/**
 * HomeDepotApi - functional programming interface
 * @export
 */
export declare const HomeDepotApiFp: (configuration?: Configuration) => {
    /**
     *
     * @summary Add HD Stores to DB
     * @param {Array<string>} body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    hDControllerAddHDStore(body: Array<string>, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<void>>>;
    /**
     *
     * @summary Adds item data for a specific store ID
     * @param {BulkUpsertHDStoreItemsDto} body
     * @param {string} storeId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    hDControllerAddItemsToStore(body: BulkUpsertHDStoreItemsDto, storeId: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<void>>>;
    /**
     *
     * @summary Get all HD categories info
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    hDControllerGetAllHDCategories(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<Array<HDCategoryDto>>>>;
    /**
     *
     * @summary Get all HD stores info
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    hDControllerGetAllHDStores(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<Array<HDStoreDto>>>>;
    /**
     *
     * @summary Get HD item MSRP price
     * @param {Array<string>} body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    hDControllerGetHDItemsPrice(body: Array<string>, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<Array<HDItemMSRPDto>>>>;
    /**
     *
     * @summary Get HD store info
     * @param {Array<string>} body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    hDControllerGetHDStores(body: Array<string>, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<Array<HDStoreDto>>>>;
    /**
     *
     * @summary Returns items with optional pagination within a specified store
     * @param {string} storeId
     * @param {number} [page] Page number for pagination
     * @param {number} [pageSize] Number of items per page
     * @param {string} [searchKey] Search key for filtering items by itemId, storeSku, modelNumber, upc, brand, or name
     * @param {string} [categoryId] Filter by category ID
     * @param {string} [msrp] Filter items with msrp greater than, less than, or equal
     * @param {string} [buyAsLowAs] Filter items with buyAsLowAs greater than, less than, or equal
     * @param {string} [clearanceOnly] Filter only clearance items? Accepts &#x27;Y&#x27; or &#x27;N&#x27;
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    hDControllerGetItemsByStore(storeId: string, page?: number, pageSize?: number, searchKey?: string, categoryId?: string, msrp?: string, buyAsLowAs?: string, clearanceOnly?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<HDStoreItemsResponseDto>>>;
    /**
     *
     * @summary Returns items with optional pagination
     * @param {number} [page] Page number for pagination
     * @param {number} [pageSize] Number of items per page
     * @param {string} [searchKey] Search key for filtering items by itemId, storeSku, modelNumber, upc, brand, or name
     * @param {string} [categoryId] Filter by category ID
     * @param {string} [msrp] Filter items with msrp greater than, less than, or equal
     * @param {string} [buyAsLowAs] Filter items with buyAsLowAs greater than, less than, or equal
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    hDControllerGetItemsGlobally(page?: number, pageSize?: number, searchKey?: string, categoryId?: string, msrp?: string, buyAsLowAs?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<HDGlobalItemsResponseDto>>>;
};
/**
 * HomeDepotApi - factory interface
 * @export
 */
export declare const HomeDepotApiFactory: (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) => {
    /**
     *
     * @summary Add HD Stores to DB
     * @param {Array<string>} body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    hDControllerAddHDStore(body: Array<string>, options?: AxiosRequestConfig): Promise<AxiosResponse<void>>;
    /**
     *
     * @summary Adds item data for a specific store ID
     * @param {BulkUpsertHDStoreItemsDto} body
     * @param {string} storeId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    hDControllerAddItemsToStore(body: BulkUpsertHDStoreItemsDto, storeId: string, options?: AxiosRequestConfig): Promise<AxiosResponse<void>>;
    /**
     *
     * @summary Get all HD categories info
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    hDControllerGetAllHDCategories(options?: AxiosRequestConfig): Promise<AxiosResponse<Array<HDCategoryDto>>>;
    /**
     *
     * @summary Get all HD stores info
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    hDControllerGetAllHDStores(options?: AxiosRequestConfig): Promise<AxiosResponse<Array<HDStoreDto>>>;
    /**
     *
     * @summary Get HD item MSRP price
     * @param {Array<string>} body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    hDControllerGetHDItemsPrice(body: Array<string>, options?: AxiosRequestConfig): Promise<AxiosResponse<Array<HDItemMSRPDto>>>;
    /**
     *
     * @summary Get HD store info
     * @param {Array<string>} body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    hDControllerGetHDStores(body: Array<string>, options?: AxiosRequestConfig): Promise<AxiosResponse<Array<HDStoreDto>>>;
    /**
     *
     * @summary Returns items with optional pagination within a specified store
     * @param {string} storeId
     * @param {number} [page] Page number for pagination
     * @param {number} [pageSize] Number of items per page
     * @param {string} [searchKey] Search key for filtering items by itemId, storeSku, modelNumber, upc, brand, or name
     * @param {string} [categoryId] Filter by category ID
     * @param {string} [msrp] Filter items with msrp greater than, less than, or equal
     * @param {string} [buyAsLowAs] Filter items with buyAsLowAs greater than, less than, or equal
     * @param {string} [clearanceOnly] Filter only clearance items? Accepts &#x27;Y&#x27; or &#x27;N&#x27;
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    hDControllerGetItemsByStore(storeId: string, page?: number, pageSize?: number, searchKey?: string, categoryId?: string, msrp?: string, buyAsLowAs?: string, clearanceOnly?: string, options?: AxiosRequestConfig): Promise<AxiosResponse<HDStoreItemsResponseDto>>;
    /**
     *
     * @summary Returns items with optional pagination
     * @param {number} [page] Page number for pagination
     * @param {number} [pageSize] Number of items per page
     * @param {string} [searchKey] Search key for filtering items by itemId, storeSku, modelNumber, upc, brand, or name
     * @param {string} [categoryId] Filter by category ID
     * @param {string} [msrp] Filter items with msrp greater than, less than, or equal
     * @param {string} [buyAsLowAs] Filter items with buyAsLowAs greater than, less than, or equal
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    hDControllerGetItemsGlobally(page?: number, pageSize?: number, searchKey?: string, categoryId?: string, msrp?: string, buyAsLowAs?: string, options?: AxiosRequestConfig): Promise<AxiosResponse<HDGlobalItemsResponseDto>>;
};
/**
 * HomeDepotApi - object-oriented interface
 * @export
 * @class HomeDepotApi
 * @extends {BaseAPI}
 */
export declare class HomeDepotApi extends BaseAPI {
    /**
     *
     * @summary Add HD Stores to DB
     * @param {Array<string>} body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof HomeDepotApi
     */
    hDControllerAddHDStore(body: Array<string>, options?: AxiosRequestConfig): Promise<AxiosResponse<void>>;
    /**
     *
     * @summary Adds item data for a specific store ID
     * @param {BulkUpsertHDStoreItemsDto} body
     * @param {string} storeId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof HomeDepotApi
     */
    hDControllerAddItemsToStore(body: BulkUpsertHDStoreItemsDto, storeId: string, options?: AxiosRequestConfig): Promise<AxiosResponse<void>>;
    /**
     *
     * @summary Get all HD categories info
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof HomeDepotApi
     */
    hDControllerGetAllHDCategories(options?: AxiosRequestConfig): Promise<AxiosResponse<Array<HDCategoryDto>>>;
    /**
     *
     * @summary Get all HD stores info
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof HomeDepotApi
     */
    hDControllerGetAllHDStores(options?: AxiosRequestConfig): Promise<AxiosResponse<Array<HDStoreDto>>>;
    /**
     *
     * @summary Get HD item MSRP price
     * @param {Array<string>} body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof HomeDepotApi
     */
    hDControllerGetHDItemsPrice(body: Array<string>, options?: AxiosRequestConfig): Promise<AxiosResponse<Array<HDItemMSRPDto>>>;
    /**
     *
     * @summary Get HD store info
     * @param {Array<string>} body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof HomeDepotApi
     */
    hDControllerGetHDStores(body: Array<string>, options?: AxiosRequestConfig): Promise<AxiosResponse<Array<HDStoreDto>>>;
    /**
     *
     * @summary Returns items with optional pagination within a specified store
     * @param {string} storeId
     * @param {number} [page] Page number for pagination
     * @param {number} [pageSize] Number of items per page
     * @param {string} [searchKey] Search key for filtering items by itemId, storeSku, modelNumber, upc, brand, or name
     * @param {string} [categoryId] Filter by category ID
     * @param {string} [msrp] Filter items with msrp greater than, less than, or equal
     * @param {string} [buyAsLowAs] Filter items with buyAsLowAs greater than, less than, or equal
     * @param {string} [clearanceOnly] Filter only clearance items? Accepts &#x27;Y&#x27; or &#x27;N&#x27;
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof HomeDepotApi
     */
    hDControllerGetItemsByStore(storeId: string, page?: number, pageSize?: number, searchKey?: string, categoryId?: string, msrp?: string, buyAsLowAs?: string, clearanceOnly?: string, options?: AxiosRequestConfig): Promise<AxiosResponse<HDStoreItemsResponseDto>>;
    /**
     *
     * @summary Returns items with optional pagination
     * @param {number} [page] Page number for pagination
     * @param {number} [pageSize] Number of items per page
     * @param {string} [searchKey] Search key for filtering items by itemId, storeSku, modelNumber, upc, brand, or name
     * @param {string} [categoryId] Filter by category ID
     * @param {string} [msrp] Filter items with msrp greater than, less than, or equal
     * @param {string} [buyAsLowAs] Filter items with buyAsLowAs greater than, less than, or equal
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof HomeDepotApi
     */
    hDControllerGetItemsGlobally(page?: number, pageSize?: number, searchKey?: string, categoryId?: string, msrp?: string, buyAsLowAs?: string, options?: AxiosRequestConfig): Promise<AxiosResponse<HDGlobalItemsResponseDto>>;
}
