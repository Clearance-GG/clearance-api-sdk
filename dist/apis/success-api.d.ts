/**
 * Clearance API
 * Clearance.gg API docs for all the bots and monitors
 *
 * OpenAPI spec version: 1.0
 *
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */
import { AxiosResponse, AxiosInstance, AxiosRequestConfig } from 'axios';
import { Configuration } from '../configuration';
import { RequestArgs, BaseAPI } from '../base';
import { DiscordIdDto } from '../models';
import { GetChannelIdsResponseDto } from '../models';
import { LeaderboardEntryDto } from '../models';
import { PointsBalanceDto } from '../models';
import { UpdateSuccessDTO } from '../models';
/**
 * SuccessApi - axios parameter creator
 * @export
 */
export declare const SuccessApiAxiosParamCreator: (configuration?: Configuration) => {
    /**
     *
     * @summary Get discord channel IDs
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    successControllerGetChannelIds: (options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     *
     * @summary Get the leaderboard for a guild
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    successControllerGetLeaderboard: (options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     *
     * @summary Get success ledger info for a specific message ID
     * @param {string} userId The user to check for
     * @param {string} channelId The ID of the channel to fetch info from
     * @param {string} messageId The ID of the message to fetch info from
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    successControllerGetSuccessLedgerInfo: (userId: string, channelId: string, messageId: string, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     *
     * @summary Update or create success points for a user
     * @param {UpdateSuccessDTO} body The points and related info to update/create
     * @param {string} userId The ID of the user to update/create points for
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    successControllerUpdatePoints: (body: UpdateSuccessDTO, userId: string, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     *
     * @summary Add or update discord channel IDs
     * @param {DiscordIdDto} body The channel id
     * @param {string} channelId The ID of the channel to update
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    successControllerUpsertChannelId: (body: DiscordIdDto, channelId: string, options?: AxiosRequestConfig) => Promise<RequestArgs>;
};
/**
 * SuccessApi - functional programming interface
 * @export
 */
export declare const SuccessApiFp: (configuration?: Configuration) => {
    /**
     *
     * @summary Get discord channel IDs
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    successControllerGetChannelIds(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<GetChannelIdsResponseDto>>>;
    /**
     *
     * @summary Get the leaderboard for a guild
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    successControllerGetLeaderboard(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<Array<LeaderboardEntryDto>>>>;
    /**
     *
     * @summary Get success ledger info for a specific message ID
     * @param {string} userId The user to check for
     * @param {string} channelId The ID of the channel to fetch info from
     * @param {string} messageId The ID of the message to fetch info from
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    successControllerGetSuccessLedgerInfo(userId: string, channelId: string, messageId: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<boolean>>>;
    /**
     *
     * @summary Update or create success points for a user
     * @param {UpdateSuccessDTO} body The points and related info to update/create
     * @param {string} userId The ID of the user to update/create points for
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    successControllerUpdatePoints(body: UpdateSuccessDTO, userId: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<PointsBalanceDto>>>;
    /**
     *
     * @summary Add or update discord channel IDs
     * @param {DiscordIdDto} body The channel id
     * @param {string} channelId The ID of the channel to update
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    successControllerUpsertChannelId(body: DiscordIdDto, channelId: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<void>>>;
};
/**
 * SuccessApi - factory interface
 * @export
 */
export declare const SuccessApiFactory: (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) => {
    /**
     *
     * @summary Get discord channel IDs
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    successControllerGetChannelIds(options?: AxiosRequestConfig): Promise<AxiosResponse<GetChannelIdsResponseDto>>;
    /**
     *
     * @summary Get the leaderboard for a guild
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    successControllerGetLeaderboard(options?: AxiosRequestConfig): Promise<AxiosResponse<Array<LeaderboardEntryDto>>>;
    /**
     *
     * @summary Get success ledger info for a specific message ID
     * @param {string} userId The user to check for
     * @param {string} channelId The ID of the channel to fetch info from
     * @param {string} messageId The ID of the message to fetch info from
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    successControllerGetSuccessLedgerInfo(userId: string, channelId: string, messageId: string, options?: AxiosRequestConfig): Promise<AxiosResponse<boolean>>;
    /**
     *
     * @summary Update or create success points for a user
     * @param {UpdateSuccessDTO} body The points and related info to update/create
     * @param {string} userId The ID of the user to update/create points for
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    successControllerUpdatePoints(body: UpdateSuccessDTO, userId: string, options?: AxiosRequestConfig): Promise<AxiosResponse<PointsBalanceDto>>;
    /**
     *
     * @summary Add or update discord channel IDs
     * @param {DiscordIdDto} body The channel id
     * @param {string} channelId The ID of the channel to update
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    successControllerUpsertChannelId(body: DiscordIdDto, channelId: string, options?: AxiosRequestConfig): Promise<AxiosResponse<void>>;
};
/**
 * SuccessApi - object-oriented interface
 * @export
 * @class SuccessApi
 * @extends {BaseAPI}
 */
export declare class SuccessApi extends BaseAPI {
    /**
     *
     * @summary Get discord channel IDs
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SuccessApi
     */
    successControllerGetChannelIds(options?: AxiosRequestConfig): Promise<AxiosResponse<GetChannelIdsResponseDto>>;
    /**
     *
     * @summary Get the leaderboard for a guild
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SuccessApi
     */
    successControllerGetLeaderboard(options?: AxiosRequestConfig): Promise<AxiosResponse<Array<LeaderboardEntryDto>>>;
    /**
     *
     * @summary Get success ledger info for a specific message ID
     * @param {string} userId The user to check for
     * @param {string} channelId The ID of the channel to fetch info from
     * @param {string} messageId The ID of the message to fetch info from
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SuccessApi
     */
    successControllerGetSuccessLedgerInfo(userId: string, channelId: string, messageId: string, options?: AxiosRequestConfig): Promise<AxiosResponse<boolean>>;
    /**
     *
     * @summary Update or create success points for a user
     * @param {UpdateSuccessDTO} body The points and related info to update/create
     * @param {string} userId The ID of the user to update/create points for
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SuccessApi
     */
    successControllerUpdatePoints(body: UpdateSuccessDTO, userId: string, options?: AxiosRequestConfig): Promise<AxiosResponse<PointsBalanceDto>>;
    /**
     *
     * @summary Add or update discord channel IDs
     * @param {DiscordIdDto} body The channel id
     * @param {string} channelId The ID of the channel to update
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SuccessApi
     */
    successControllerUpsertChannelId(body: DiscordIdDto, channelId: string, options?: AxiosRequestConfig): Promise<AxiosResponse<void>>;
}
