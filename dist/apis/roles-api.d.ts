/**
 * Clearance API
 * Clearance.gg API docs for all the bots and monitors
 *
 * OpenAPI spec version: 1.0
 *
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */
import { AxiosResponse, AxiosInstance, AxiosRequestConfig } from 'axios';
import { Configuration } from '../configuration';
import { RequestArgs, BaseAPI } from '../base';
import { DeleteRoleDto } from '../models';
import { DumpRolesResponseDto } from '../models';
import { RoleCategoryDto } from '../models';
import { UpsertRoleDto } from '../models';
/**
 * RolesApi - axios parameter creator
 * @export
 */
export declare const RolesApiAxiosParamCreator: (configuration?: Configuration) => {
    /**
     *
     * @summary Create a new role category
     * @param {RoleCategoryDto} body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    rolesControllerCreateCategory: (body: RoleCategoryDto, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     *
     * @summary Delete a role
     * @param {DeleteRoleDto} body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    rolesControllerDeleteRole: (body: DeleteRoleDto, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     *
     * @summary Delete a role category and its associated roles
     * @param {RoleCategoryDto} body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    rolesControllerDeleteRoleCategory: (body: RoleCategoryDto, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     *
     * @summary Get all roles
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    rolesControllerDumpRoles: (options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     *
     * @summary Update message ID and channel ID for a role category
     * @param {RoleCategoryDto} body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    rolesControllerUpdateRoleCategory: (body: RoleCategoryDto, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     *
     * @summary Upsert a role within a role category
     * @param {UpsertRoleDto} body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    rolesControllerUpsertRole: (body: UpsertRoleDto, options?: AxiosRequestConfig) => Promise<RequestArgs>;
};
/**
 * RolesApi - functional programming interface
 * @export
 */
export declare const RolesApiFp: (configuration?: Configuration) => {
    /**
     *
     * @summary Create a new role category
     * @param {RoleCategoryDto} body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    rolesControllerCreateCategory(body: RoleCategoryDto, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<RoleCategoryDto>>>;
    /**
     *
     * @summary Delete a role
     * @param {DeleteRoleDto} body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    rolesControllerDeleteRole(body: DeleteRoleDto, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<void>>>;
    /**
     *
     * @summary Delete a role category and its associated roles
     * @param {RoleCategoryDto} body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    rolesControllerDeleteRoleCategory(body: RoleCategoryDto, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<void>>>;
    /**
     *
     * @summary Get all roles
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    rolesControllerDumpRoles(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<DumpRolesResponseDto>>>;
    /**
     *
     * @summary Update message ID and channel ID for a role category
     * @param {RoleCategoryDto} body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    rolesControllerUpdateRoleCategory(body: RoleCategoryDto, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<RoleCategoryDto>>>;
    /**
     *
     * @summary Upsert a role within a role category
     * @param {UpsertRoleDto} body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    rolesControllerUpsertRole(body: UpsertRoleDto, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<void>>>;
};
/**
 * RolesApi - factory interface
 * @export
 */
export declare const RolesApiFactory: (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) => {
    /**
     *
     * @summary Create a new role category
     * @param {RoleCategoryDto} body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    rolesControllerCreateCategory(body: RoleCategoryDto, options?: AxiosRequestConfig): Promise<AxiosResponse<RoleCategoryDto>>;
    /**
     *
     * @summary Delete a role
     * @param {DeleteRoleDto} body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    rolesControllerDeleteRole(body: DeleteRoleDto, options?: AxiosRequestConfig): Promise<AxiosResponse<void>>;
    /**
     *
     * @summary Delete a role category and its associated roles
     * @param {RoleCategoryDto} body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    rolesControllerDeleteRoleCategory(body: RoleCategoryDto, options?: AxiosRequestConfig): Promise<AxiosResponse<void>>;
    /**
     *
     * @summary Get all roles
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    rolesControllerDumpRoles(options?: AxiosRequestConfig): Promise<AxiosResponse<DumpRolesResponseDto>>;
    /**
     *
     * @summary Update message ID and channel ID for a role category
     * @param {RoleCategoryDto} body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    rolesControllerUpdateRoleCategory(body: RoleCategoryDto, options?: AxiosRequestConfig): Promise<AxiosResponse<RoleCategoryDto>>;
    /**
     *
     * @summary Upsert a role within a role category
     * @param {UpsertRoleDto} body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    rolesControllerUpsertRole(body: UpsertRoleDto, options?: AxiosRequestConfig): Promise<AxiosResponse<void>>;
};
/**
 * RolesApi - object-oriented interface
 * @export
 * @class RolesApi
 * @extends {BaseAPI}
 */
export declare class RolesApi extends BaseAPI {
    /**
     *
     * @summary Create a new role category
     * @param {RoleCategoryDto} body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RolesApi
     */
    rolesControllerCreateCategory(body: RoleCategoryDto, options?: AxiosRequestConfig): Promise<AxiosResponse<RoleCategoryDto>>;
    /**
     *
     * @summary Delete a role
     * @param {DeleteRoleDto} body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RolesApi
     */
    rolesControllerDeleteRole(body: DeleteRoleDto, options?: AxiosRequestConfig): Promise<AxiosResponse<void>>;
    /**
     *
     * @summary Delete a role category and its associated roles
     * @param {RoleCategoryDto} body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RolesApi
     */
    rolesControllerDeleteRoleCategory(body: RoleCategoryDto, options?: AxiosRequestConfig): Promise<AxiosResponse<void>>;
    /**
     *
     * @summary Get all roles
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RolesApi
     */
    rolesControllerDumpRoles(options?: AxiosRequestConfig): Promise<AxiosResponse<DumpRolesResponseDto>>;
    /**
     *
     * @summary Update message ID and channel ID for a role category
     * @param {RoleCategoryDto} body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RolesApi
     */
    rolesControllerUpdateRoleCategory(body: RoleCategoryDto, options?: AxiosRequestConfig): Promise<AxiosResponse<RoleCategoryDto>>;
    /**
     *
     * @summary Upsert a role within a role category
     * @param {UpsertRoleDto} body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RolesApi
     */
    rolesControllerUpsertRole(body: UpsertRoleDto, options?: AxiosRequestConfig): Promise<AxiosResponse<void>>;
}
