/* tslint:disable */
/* eslint-disable */
/**
 * Clearance API
 * Clearance.gg API docs for all the bots and monitors
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from './configuration';
import type { AxiosPromise, AxiosInstance, RawAxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from './common';
import type { RequestArgs } from './base';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, BaseAPI, RequiredError, operationServerMap } from './base';

/**
 * 
 * @export
 * @interface AuthDTO
 */
export interface AuthDTO {
    /**
     * 
     * @type {string}
     * @memberof AuthDTO
     */
    'guildId': string;
    /**
     * 
     * @type {string}
     * @memberof AuthDTO
     */
    'signature': string;
}
/**
 * 
 * @export
 * @interface CreateProxiesDto
 */
export interface CreateProxiesDto {
    /**
     * 
     * @type {Array<ProxyDto>}
     * @memberof CreateProxiesDto
     */
    'data': Array<ProxyDto>;
}
/**
 * 
 * @export
 * @interface CreateUpdatePingDto
 */
export interface CreateUpdatePingDto {
    /**
     * 
     * @type {string}
     * @memberof CreateUpdatePingDto
     */
    'channelId': string;
    /**
     * 
     * @type {boolean}
     * @memberof CreateUpdatePingDto
     */
    'image'?: boolean;
}
/**
 * 
 * @export
 * @interface DeletePingDto
 */
export interface DeletePingDto {
    /**
     * 
     * @type {string}
     * @memberof DeletePingDto
     */
    'channelId': string;
}
/**
 * 
 * @export
 * @interface DeleteRoleDto
 */
export interface DeleteRoleDto {
    /**
     * 
     * @type {string}
     * @memberof DeleteRoleDto
     */
    'roleId': string;
}
/**
 * 
 * @export
 * @interface ProxyDto
 */
export interface ProxyDto {
    /**
     * 
     * @type {string}
     * @memberof ProxyDto
     */
    'host': string;
    /**
     * 
     * @type {string}
     * @memberof ProxyDto
     */
    'port': string;
    /**
     * 
     * @type {string}
     * @memberof ProxyDto
     */
    'user'?: string;
    /**
     * 
     * @type {string}
     * @memberof ProxyDto
     */
    'pass'?: string;
}
/**
 * 
 * @export
 * @interface RoleCategoryDto
 */
export interface RoleCategoryDto {
    /**
     * 
     * @type {string}
     * @memberof RoleCategoryDto
     */
    'name': string;
    /**
     * 
     * @type {string}
     * @memberof RoleCategoryDto
     */
    'messageId'?: string;
    /**
     * 
     * @type {string}
     * @memberof RoleCategoryDto
     */
    'channelId'?: string;
}
/**
 * 
 * @export
 * @interface UpdateSuccessDTO
 */
export interface UpdateSuccessDTO {
    /**
     * 
     * @type {string}
     * @memberof UpdateSuccessDTO
     */
    'channelId': string;
    /**
     * 
     * @type {string}
     * @memberof UpdateSuccessDTO
     */
    'messageId': string;
    /**
     * 
     * @type {number}
     * @memberof UpdateSuccessDTO
     */
    'points': number;
    /**
     * 
     * @type {string}
     * @memberof UpdateSuccessDTO
     */
    'reason': string;
}
/**
 * 
 * @export
 * @interface UpsertRoleDto
 */
export interface UpsertRoleDto {
    /**
     * 
     * @type {string}
     * @memberof UpsertRoleDto
     */
    'name': string;
    /**
     * 
     * @type {string}
     * @memberof UpsertRoleDto
     */
    'roleId': string;
    /**
     * 
     * @type {string}
     * @memberof UpsertRoleDto
     */
    'emoji': string;
}

/**
 * AuthApi - axios parameter creator
 * @export
 */
export const AuthApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Sign in a user
         * @param {AuthDTO} authDTO 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        authControllerSignIn: async (authDTO: AuthDTO, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'authDTO' is not null or undefined
            assertParamExists('authControllerSignIn', 'authDTO', authDTO)
            const localVarPath = `/auth/signin`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(authDTO, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * AuthApi - functional programming interface
 * @export
 */
export const AuthApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = AuthApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary Sign in a user
         * @param {AuthDTO} authDTO 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async authControllerSignIn(authDTO: AuthDTO, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.authControllerSignIn(authDTO, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['AuthApi.authControllerSignIn']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * AuthApi - factory interface
 * @export
 */
export const AuthApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = AuthApiFp(configuration)
    return {
        /**
         * 
         * @summary Sign in a user
         * @param {AuthDTO} authDTO 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        authControllerSignIn(authDTO: AuthDTO, options?: any): AxiosPromise<void> {
            return localVarFp.authControllerSignIn(authDTO, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * AuthApi - object-oriented interface
 * @export
 * @class AuthApi
 * @extends {BaseAPI}
 */
export class AuthApi extends BaseAPI {
    /**
     * 
     * @summary Sign in a user
     * @param {AuthDTO} authDTO 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthApi
     */
    public authControllerSignIn(authDTO: AuthDTO, options?: RawAxiosRequestConfig) {
        return AuthApiFp(this.configuration).authControllerSignIn(authDTO, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * DefaultApi - axios parameter creator
 * @export
 */
export const DefaultApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {object} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        scrapersControllerCreate: async (body: object, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'body' is not null or undefined
            assertParamExists('scrapersControllerCreate', 'body', body)
            const localVarPath = `/scrapers`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(body, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        scrapersControllerFindAll: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/scrapers`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        scrapersControllerFindOne: async (id: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('scrapersControllerFindOne', 'id', id)
            const localVarPath = `/scrapers/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        scrapersControllerRemove: async (id: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('scrapersControllerRemove', 'id', id)
            const localVarPath = `/scrapers/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} id 
         * @param {object} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        scrapersControllerUpdate: async (id: string, body: object, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('scrapersControllerUpdate', 'id', id)
            // verify required parameter 'body' is not null or undefined
            assertParamExists('scrapersControllerUpdate', 'body', body)
            const localVarPath = `/scrapers/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(body, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * DefaultApi - functional programming interface
 * @export
 */
export const DefaultApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = DefaultApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {object} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async scrapersControllerCreate(body: object, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.scrapersControllerCreate(body, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.scrapersControllerCreate']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async scrapersControllerFindAll(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.scrapersControllerFindAll(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.scrapersControllerFindAll']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async scrapersControllerFindOne(id: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.scrapersControllerFindOne(id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.scrapersControllerFindOne']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async scrapersControllerRemove(id: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.scrapersControllerRemove(id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.scrapersControllerRemove']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {string} id 
         * @param {object} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async scrapersControllerUpdate(id: string, body: object, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.scrapersControllerUpdate(id, body, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.scrapersControllerUpdate']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * DefaultApi - factory interface
 * @export
 */
export const DefaultApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = DefaultApiFp(configuration)
    return {
        /**
         * 
         * @param {object} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        scrapersControllerCreate(body: object, options?: any): AxiosPromise<void> {
            return localVarFp.scrapersControllerCreate(body, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        scrapersControllerFindAll(options?: any): AxiosPromise<void> {
            return localVarFp.scrapersControllerFindAll(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        scrapersControllerFindOne(id: string, options?: any): AxiosPromise<void> {
            return localVarFp.scrapersControllerFindOne(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        scrapersControllerRemove(id: string, options?: any): AxiosPromise<void> {
            return localVarFp.scrapersControllerRemove(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} id 
         * @param {object} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        scrapersControllerUpdate(id: string, body: object, options?: any): AxiosPromise<void> {
            return localVarFp.scrapersControllerUpdate(id, body, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * DefaultApi - object-oriented interface
 * @export
 * @class DefaultApi
 * @extends {BaseAPI}
 */
export class DefaultApi extends BaseAPI {
    /**
     * 
     * @param {object} body 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public scrapersControllerCreate(body: object, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).scrapersControllerCreate(body, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public scrapersControllerFindAll(options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).scrapersControllerFindAll(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public scrapersControllerFindOne(id: string, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).scrapersControllerFindOne(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public scrapersControllerRemove(id: string, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).scrapersControllerRemove(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} id 
     * @param {object} body 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public scrapersControllerUpdate(id: string, body: object, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).scrapersControllerUpdate(id, body, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * PingsApi - axios parameter creator
 * @export
 */
export const PingsApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Add a new ping
         * @param {CreateUpdatePingDto} createUpdatePingDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        pingsControllerAddPing: async (createUpdatePingDto: CreateUpdatePingDto, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'createUpdatePingDto' is not null or undefined
            assertParamExists('pingsControllerAddPing', 'createUpdatePingDto', createUpdatePingDto)
            const localVarPath = `/pings`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(createUpdatePingDto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Delete a ping
         * @param {DeletePingDto} deletePingDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        pingsControllerDeletePing: async (deletePingDto: DeletePingDto, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'deletePingDto' is not null or undefined
            assertParamExists('pingsControllerDeletePing', 'deletePingDto', deletePingDto)
            const localVarPath = `/pings`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(deletePingDto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Update a ping
         * @param {CreateUpdatePingDto} createUpdatePingDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        pingsControllerUpdatePing: async (createUpdatePingDto: CreateUpdatePingDto, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'createUpdatePingDto' is not null or undefined
            assertParamExists('pingsControllerUpdatePing', 'createUpdatePingDto', createUpdatePingDto)
            const localVarPath = `/pings`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(createUpdatePingDto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * PingsApi - functional programming interface
 * @export
 */
export const PingsApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = PingsApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary Add a new ping
         * @param {CreateUpdatePingDto} createUpdatePingDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async pingsControllerAddPing(createUpdatePingDto: CreateUpdatePingDto, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CreateUpdatePingDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.pingsControllerAddPing(createUpdatePingDto, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['PingsApi.pingsControllerAddPing']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Delete a ping
         * @param {DeletePingDto} deletePingDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async pingsControllerDeletePing(deletePingDto: DeletePingDto, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.pingsControllerDeletePing(deletePingDto, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['PingsApi.pingsControllerDeletePing']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Update a ping
         * @param {CreateUpdatePingDto} createUpdatePingDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async pingsControllerUpdatePing(createUpdatePingDto: CreateUpdatePingDto, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CreateUpdatePingDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.pingsControllerUpdatePing(createUpdatePingDto, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['PingsApi.pingsControllerUpdatePing']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * PingsApi - factory interface
 * @export
 */
export const PingsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = PingsApiFp(configuration)
    return {
        /**
         * 
         * @summary Add a new ping
         * @param {CreateUpdatePingDto} createUpdatePingDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        pingsControllerAddPing(createUpdatePingDto: CreateUpdatePingDto, options?: any): AxiosPromise<CreateUpdatePingDto> {
            return localVarFp.pingsControllerAddPing(createUpdatePingDto, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Delete a ping
         * @param {DeletePingDto} deletePingDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        pingsControllerDeletePing(deletePingDto: DeletePingDto, options?: any): AxiosPromise<void> {
            return localVarFp.pingsControllerDeletePing(deletePingDto, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Update a ping
         * @param {CreateUpdatePingDto} createUpdatePingDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        pingsControllerUpdatePing(createUpdatePingDto: CreateUpdatePingDto, options?: any): AxiosPromise<CreateUpdatePingDto> {
            return localVarFp.pingsControllerUpdatePing(createUpdatePingDto, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * PingsApi - object-oriented interface
 * @export
 * @class PingsApi
 * @extends {BaseAPI}
 */
export class PingsApi extends BaseAPI {
    /**
     * 
     * @summary Add a new ping
     * @param {CreateUpdatePingDto} createUpdatePingDto 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PingsApi
     */
    public pingsControllerAddPing(createUpdatePingDto: CreateUpdatePingDto, options?: RawAxiosRequestConfig) {
        return PingsApiFp(this.configuration).pingsControllerAddPing(createUpdatePingDto, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Delete a ping
     * @param {DeletePingDto} deletePingDto 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PingsApi
     */
    public pingsControllerDeletePing(deletePingDto: DeletePingDto, options?: RawAxiosRequestConfig) {
        return PingsApiFp(this.configuration).pingsControllerDeletePing(deletePingDto, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Update a ping
     * @param {CreateUpdatePingDto} createUpdatePingDto 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PingsApi
     */
    public pingsControllerUpdatePing(createUpdatePingDto: CreateUpdatePingDto, options?: RawAxiosRequestConfig) {
        return PingsApiFp(this.configuration).pingsControllerUpdatePing(createUpdatePingDto, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * ProxiesApi - axios parameter creator
 * @export
 */
export const ProxiesApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Add new proxies
         * @param {CreateProxiesDto} createProxiesDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        proxiesControllerAddProxies: async (createProxiesDto: CreateProxiesDto, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'createProxiesDto' is not null or undefined
            assertParamExists('proxiesControllerAddProxies', 'createProxiesDto', createProxiesDto)
            const localVarPath = `/proxies/add`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(createProxiesDto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Delete all proxies
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        proxiesControllerDeleteAllProxies: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/proxies/delete`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Fetch all proxies
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        proxiesControllerFetchAllProxies: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/proxies/fetch`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * ProxiesApi - functional programming interface
 * @export
 */
export const ProxiesApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = ProxiesApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary Add new proxies
         * @param {CreateProxiesDto} createProxiesDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async proxiesControllerAddProxies(createProxiesDto: CreateProxiesDto, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.proxiesControllerAddProxies(createProxiesDto, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ProxiesApi.proxiesControllerAddProxies']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Delete all proxies
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async proxiesControllerDeleteAllProxies(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.proxiesControllerDeleteAllProxies(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ProxiesApi.proxiesControllerDeleteAllProxies']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Fetch all proxies
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async proxiesControllerFetchAllProxies(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<CreateProxiesDto>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.proxiesControllerFetchAllProxies(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ProxiesApi.proxiesControllerFetchAllProxies']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * ProxiesApi - factory interface
 * @export
 */
export const ProxiesApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = ProxiesApiFp(configuration)
    return {
        /**
         * 
         * @summary Add new proxies
         * @param {CreateProxiesDto} createProxiesDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        proxiesControllerAddProxies(createProxiesDto: CreateProxiesDto, options?: any): AxiosPromise<void> {
            return localVarFp.proxiesControllerAddProxies(createProxiesDto, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Delete all proxies
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        proxiesControllerDeleteAllProxies(options?: any): AxiosPromise<void> {
            return localVarFp.proxiesControllerDeleteAllProxies(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Fetch all proxies
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        proxiesControllerFetchAllProxies(options?: any): AxiosPromise<Array<CreateProxiesDto>> {
            return localVarFp.proxiesControllerFetchAllProxies(options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * ProxiesApi - object-oriented interface
 * @export
 * @class ProxiesApi
 * @extends {BaseAPI}
 */
export class ProxiesApi extends BaseAPI {
    /**
     * 
     * @summary Add new proxies
     * @param {CreateProxiesDto} createProxiesDto 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProxiesApi
     */
    public proxiesControllerAddProxies(createProxiesDto: CreateProxiesDto, options?: RawAxiosRequestConfig) {
        return ProxiesApiFp(this.configuration).proxiesControllerAddProxies(createProxiesDto, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Delete all proxies
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProxiesApi
     */
    public proxiesControllerDeleteAllProxies(options?: RawAxiosRequestConfig) {
        return ProxiesApiFp(this.configuration).proxiesControllerDeleteAllProxies(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Fetch all proxies
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProxiesApi
     */
    public proxiesControllerFetchAllProxies(options?: RawAxiosRequestConfig) {
        return ProxiesApiFp(this.configuration).proxiesControllerFetchAllProxies(options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * RolesApi - axios parameter creator
 * @export
 */
export const RolesApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Create a new role category
         * @param {RoleCategoryDto} roleCategoryDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        rolesControllerCreateCategory: async (roleCategoryDto: RoleCategoryDto, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'roleCategoryDto' is not null or undefined
            assertParamExists('rolesControllerCreateCategory', 'roleCategoryDto', roleCategoryDto)
            const localVarPath = `/roles/create-category`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(roleCategoryDto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Delete a role
         * @param {DeleteRoleDto} deleteRoleDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        rolesControllerDeleteRole: async (deleteRoleDto: DeleteRoleDto, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'deleteRoleDto' is not null or undefined
            assertParamExists('rolesControllerDeleteRole', 'deleteRoleDto', deleteRoleDto)
            const localVarPath = `/roles/delete`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(deleteRoleDto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Delete a role category and its associated roles
         * @param {RoleCategoryDto} roleCategoryDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        rolesControllerDeleteRoleCategory: async (roleCategoryDto: RoleCategoryDto, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'roleCategoryDto' is not null or undefined
            assertParamExists('rolesControllerDeleteRoleCategory', 'roleCategoryDto', roleCategoryDto)
            const localVarPath = `/roles/delete-category`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(roleCategoryDto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get all roles
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        rolesControllerDumpRoles: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/roles/dump`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Update message ID and channel ID for a role category
         * @param {RoleCategoryDto} roleCategoryDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        rolesControllerUpdateRoleCategory: async (roleCategoryDto: RoleCategoryDto, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'roleCategoryDto' is not null or undefined
            assertParamExists('rolesControllerUpdateRoleCategory', 'roleCategoryDto', roleCategoryDto)
            const localVarPath = `/roles/update-category`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(roleCategoryDto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Upsert a role within a role category
         * @param {UpsertRoleDto} upsertRoleDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        rolesControllerUpsertRole: async (upsertRoleDto: UpsertRoleDto, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'upsertRoleDto' is not null or undefined
            assertParamExists('rolesControllerUpsertRole', 'upsertRoleDto', upsertRoleDto)
            const localVarPath = `/roles/upsert`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(upsertRoleDto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * RolesApi - functional programming interface
 * @export
 */
export const RolesApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = RolesApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary Create a new role category
         * @param {RoleCategoryDto} roleCategoryDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async rolesControllerCreateCategory(roleCategoryDto: RoleCategoryDto, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.rolesControllerCreateCategory(roleCategoryDto, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['RolesApi.rolesControllerCreateCategory']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Delete a role
         * @param {DeleteRoleDto} deleteRoleDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async rolesControllerDeleteRole(deleteRoleDto: DeleteRoleDto, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.rolesControllerDeleteRole(deleteRoleDto, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['RolesApi.rolesControllerDeleteRole']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Delete a role category and its associated roles
         * @param {RoleCategoryDto} roleCategoryDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async rolesControllerDeleteRoleCategory(roleCategoryDto: RoleCategoryDto, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.rolesControllerDeleteRoleCategory(roleCategoryDto, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['RolesApi.rolesControllerDeleteRoleCategory']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Get all roles
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async rolesControllerDumpRoles(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.rolesControllerDumpRoles(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['RolesApi.rolesControllerDumpRoles']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Update message ID and channel ID for a role category
         * @param {RoleCategoryDto} roleCategoryDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async rolesControllerUpdateRoleCategory(roleCategoryDto: RoleCategoryDto, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.rolesControllerUpdateRoleCategory(roleCategoryDto, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['RolesApi.rolesControllerUpdateRoleCategory']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Upsert a role within a role category
         * @param {UpsertRoleDto} upsertRoleDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async rolesControllerUpsertRole(upsertRoleDto: UpsertRoleDto, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.rolesControllerUpsertRole(upsertRoleDto, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['RolesApi.rolesControllerUpsertRole']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * RolesApi - factory interface
 * @export
 */
export const RolesApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = RolesApiFp(configuration)
    return {
        /**
         * 
         * @summary Create a new role category
         * @param {RoleCategoryDto} roleCategoryDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        rolesControllerCreateCategory(roleCategoryDto: RoleCategoryDto, options?: any): AxiosPromise<void> {
            return localVarFp.rolesControllerCreateCategory(roleCategoryDto, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Delete a role
         * @param {DeleteRoleDto} deleteRoleDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        rolesControllerDeleteRole(deleteRoleDto: DeleteRoleDto, options?: any): AxiosPromise<void> {
            return localVarFp.rolesControllerDeleteRole(deleteRoleDto, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Delete a role category and its associated roles
         * @param {RoleCategoryDto} roleCategoryDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        rolesControllerDeleteRoleCategory(roleCategoryDto: RoleCategoryDto, options?: any): AxiosPromise<void> {
            return localVarFp.rolesControllerDeleteRoleCategory(roleCategoryDto, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get all roles
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        rolesControllerDumpRoles(options?: any): AxiosPromise<void> {
            return localVarFp.rolesControllerDumpRoles(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Update message ID and channel ID for a role category
         * @param {RoleCategoryDto} roleCategoryDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        rolesControllerUpdateRoleCategory(roleCategoryDto: RoleCategoryDto, options?: any): AxiosPromise<void> {
            return localVarFp.rolesControllerUpdateRoleCategory(roleCategoryDto, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Upsert a role within a role category
         * @param {UpsertRoleDto} upsertRoleDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        rolesControllerUpsertRole(upsertRoleDto: UpsertRoleDto, options?: any): AxiosPromise<void> {
            return localVarFp.rolesControllerUpsertRole(upsertRoleDto, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * RolesApi - object-oriented interface
 * @export
 * @class RolesApi
 * @extends {BaseAPI}
 */
export class RolesApi extends BaseAPI {
    /**
     * 
     * @summary Create a new role category
     * @param {RoleCategoryDto} roleCategoryDto 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RolesApi
     */
    public rolesControllerCreateCategory(roleCategoryDto: RoleCategoryDto, options?: RawAxiosRequestConfig) {
        return RolesApiFp(this.configuration).rolesControllerCreateCategory(roleCategoryDto, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Delete a role
     * @param {DeleteRoleDto} deleteRoleDto 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RolesApi
     */
    public rolesControllerDeleteRole(deleteRoleDto: DeleteRoleDto, options?: RawAxiosRequestConfig) {
        return RolesApiFp(this.configuration).rolesControllerDeleteRole(deleteRoleDto, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Delete a role category and its associated roles
     * @param {RoleCategoryDto} roleCategoryDto 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RolesApi
     */
    public rolesControllerDeleteRoleCategory(roleCategoryDto: RoleCategoryDto, options?: RawAxiosRequestConfig) {
        return RolesApiFp(this.configuration).rolesControllerDeleteRoleCategory(roleCategoryDto, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get all roles
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RolesApi
     */
    public rolesControllerDumpRoles(options?: RawAxiosRequestConfig) {
        return RolesApiFp(this.configuration).rolesControllerDumpRoles(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Update message ID and channel ID for a role category
     * @param {RoleCategoryDto} roleCategoryDto 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RolesApi
     */
    public rolesControllerUpdateRoleCategory(roleCategoryDto: RoleCategoryDto, options?: RawAxiosRequestConfig) {
        return RolesApiFp(this.configuration).rolesControllerUpdateRoleCategory(roleCategoryDto, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Upsert a role within a role category
     * @param {UpsertRoleDto} upsertRoleDto 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RolesApi
     */
    public rolesControllerUpsertRole(upsertRoleDto: UpsertRoleDto, options?: RawAxiosRequestConfig) {
        return RolesApiFp(this.configuration).rolesControllerUpsertRole(upsertRoleDto, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * SuccessApi - axios parameter creator
 * @export
 */
export const SuccessApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Update or create success points for a user
         * @param {string} userId The ID of the user to update/create points for
         * @param {UpdateSuccessDTO} updateSuccessDTO The points and related info to update/create
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        successControllerCreate: async (userId: string, updateSuccessDTO: UpdateSuccessDTO, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'userId' is not null or undefined
            assertParamExists('successControllerCreate', 'userId', userId)
            // verify required parameter 'updateSuccessDTO' is not null or undefined
            assertParamExists('successControllerCreate', 'updateSuccessDTO', updateSuccessDTO)
            const localVarPath = `/success/{userId}`
                .replace(`{${"userId"}}`, encodeURIComponent(String(userId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(updateSuccessDTO, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Find success data for a specific user
         * @param {string} userId The ID of the user to find
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        successControllerFindOne: async (userId: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'userId' is not null or undefined
            assertParamExists('successControllerFindOne', 'userId', userId)
            const localVarPath = `/success/{userId}`
                .replace(`{${"userId"}}`, encodeURIComponent(String(userId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get the leaderboard for a guild
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        successControllerLeaderboard: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/success/leaderboard`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * SuccessApi - functional programming interface
 * @export
 */
export const SuccessApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = SuccessApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary Update or create success points for a user
         * @param {string} userId The ID of the user to update/create points for
         * @param {UpdateSuccessDTO} updateSuccessDTO The points and related info to update/create
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async successControllerCreate(userId: string, updateSuccessDTO: UpdateSuccessDTO, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.successControllerCreate(userId, updateSuccessDTO, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['SuccessApi.successControllerCreate']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Find success data for a specific user
         * @param {string} userId The ID of the user to find
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async successControllerFindOne(userId: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.successControllerFindOne(userId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['SuccessApi.successControllerFindOne']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Get the leaderboard for a guild
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async successControllerLeaderboard(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.successControllerLeaderboard(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['SuccessApi.successControllerLeaderboard']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * SuccessApi - factory interface
 * @export
 */
export const SuccessApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = SuccessApiFp(configuration)
    return {
        /**
         * 
         * @summary Update or create success points for a user
         * @param {string} userId The ID of the user to update/create points for
         * @param {UpdateSuccessDTO} updateSuccessDTO The points and related info to update/create
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        successControllerCreate(userId: string, updateSuccessDTO: UpdateSuccessDTO, options?: any): AxiosPromise<void> {
            return localVarFp.successControllerCreate(userId, updateSuccessDTO, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Find success data for a specific user
         * @param {string} userId The ID of the user to find
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        successControllerFindOne(userId: string, options?: any): AxiosPromise<void> {
            return localVarFp.successControllerFindOne(userId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get the leaderboard for a guild
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        successControllerLeaderboard(options?: any): AxiosPromise<void> {
            return localVarFp.successControllerLeaderboard(options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * SuccessApi - object-oriented interface
 * @export
 * @class SuccessApi
 * @extends {BaseAPI}
 */
export class SuccessApi extends BaseAPI {
    /**
     * 
     * @summary Update or create success points for a user
     * @param {string} userId The ID of the user to update/create points for
     * @param {UpdateSuccessDTO} updateSuccessDTO The points and related info to update/create
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SuccessApi
     */
    public successControllerCreate(userId: string, updateSuccessDTO: UpdateSuccessDTO, options?: RawAxiosRequestConfig) {
        return SuccessApiFp(this.configuration).successControllerCreate(userId, updateSuccessDTO, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Find success data for a specific user
     * @param {string} userId The ID of the user to find
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SuccessApi
     */
    public successControllerFindOne(userId: string, options?: RawAxiosRequestConfig) {
        return SuccessApiFp(this.configuration).successControllerFindOne(userId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get the leaderboard for a guild
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SuccessApi
     */
    public successControllerLeaderboard(options?: RawAxiosRequestConfig) {
        return SuccessApiFp(this.configuration).successControllerLeaderboard(options).then((request) => request(this.axios, this.basePath));
    }
}



